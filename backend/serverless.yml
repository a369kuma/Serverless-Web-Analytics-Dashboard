service: serverless-web-analytics

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 256
  timeout: 30
  environment:
    STAGE: ${self:provider.stage}
    ANALYTICS_TABLE: ${self:service}-analytics-${self:provider.stage}
    SITES_TABLE: ${self:service}-sites-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-analytics-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-sites-${self:provider.stage}"

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002

functions:
  # Event collection endpoint
  collectEvent:
    handler: src/handlers/collectEvent.handler
    events:
      - http:
          path: /api/events
          method: post
          cors: true
    environment:
      ANALYTICS_TABLE: ${self:service}-analytics-${self:provider.stage}

  # Dashboard API endpoints
  getAnalytics:
    handler: src/handlers/getAnalytics.handler
    events:
      - http:
          path: /api/analytics
          method: get
          cors: true
    environment:
      ANALYTICS_TABLE: ${self:service}-analytics-${self:provider.stage}
      SITES_TABLE: ${self:service}-sites-${self:provider.stage}

  getSiteStats:
    handler: src/handlers/getSiteStats.handler
    events:
      - http:
          path: /api/sites/{siteId}/stats
          method: get
          cors: true
    environment:
      ANALYTICS_TABLE: ${self:service}-analytics-${self:provider.stage}

  # Site management
  registerSite:
    handler: src/handlers/registerSite.handler
    events:
      - http:
          path: /api/sites
          method: post
          cors: true
    environment:
      SITES_TABLE: ${self:service}-sites-${self:provider.stage}

  getSites:
    handler: src/handlers/getSites.handler
    events:
      - http:
          path: /api/sites
          method: get
          cors: true
    environment:
      SITES_TABLE: ${self:service}-sites-${self:provider.stage}

  # Analytics tracking script
  analyticsScript:
    handler: src/handlers/analyticsScript.handler
    events:
      - http:
          path: /api/analytics.js
          method: get
          cors: true
    environment:
      ANALYTICS_TABLE: ${self:service}-analytics-${self:provider.stage}

resources:
  Resources:
    # Analytics table
    AnalyticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-analytics-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: siteId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: eventType
            AttributeType: S
        KeySchema:
          - AttributeName: siteId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: EventTypeIndex
            KeySchema:
              - AttributeName: eventType
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # Sites table
    SitesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-sites-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: siteId
            AttributeType: S
          - AttributeName: domain
            AttributeType: S
        KeySchema:
          - AttributeName: siteId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DomainIndex
            KeySchema:
              - AttributeName: domain
                KeyType: HASH
            Projection:
              ProjectionType: ALL

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId

    AnalyticsTableName:
      Value:
        Ref: AnalyticsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-analyticsTable

    SitesTableName:
      Value:
        Ref: SitesTable
      Export:
        Name: ${self:service}-${self:provider.stage}-sitesTable
